name: CI

on:
  push:
    branches: [main]
  merge_group:
    types: [checks_requested]
  pull_request:
    branches: [main]

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  read_msrv:
    name: Read MSRV
    uses: actions-rust-lang/msrv/.github/workflows/msrv.yml@v0.1.0

  test:
    needs: read_msrv

    strategy:
      fail-fast: false
      matrix:
        toolchain:
          - { name: msrv, version: '${{ needs.read_msrv.outputs.msrv }}' }
          - { name: stable, version: stable }

    runs-on: ubuntu-latest

    name: Test / ${{ matrix.toolchain.name }}

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust (${{ matrix.toolchain.name }})
        uses: actions-rust-lang/setup-rust-toolchain@v1.9.0
        with:
          toolchain: ${{ matrix.toolchain.version }}
          target: thumbv6m-none-eabi

      - name: Install just, nextest
        uses: taiki-e/install-action@v2.44.5
        with:
          tool: just,nextest

      # - name: workaround MSRV issues
      #   if: matrix.toolchain.name == 'msrv'
      #   run: just downgrade-msrv

      - name: Test
        # run: just test-no-coverage
        run: cargo nextest run --workspace --all-targets --all-features

      - name: Build (no-std)
        # run: just test-no-coverage
        run: cargo build --target thumbv6m-none-eabi --manifest-path=./ensure-no-std/Cargo.toml
#
# TODO: migate circle CI jobs
#
# jobs:
#   clippy:
#     docker: [image: cimg/rust:1.70.0]
#     steps:
#       - checkout
#       - run: cargo --version
#       - restore_cache: { key: clippy-cache }
#       - run: cargo clippy --workspace --all-targets --all-features
#       - save_cache:
#           key: clippy-cache
#           paths:
#             - '~/.cargo'
#             - './target'
#
#   doc-test:
#     docker: [image: cimg/rust:1.70.0]
#     environment:
#       RUSTC_BOOTSTRAP: '1'
#       RUSTDOCFLAGS: --cfg=docsrs -Dwarnings
#     steps:
#       - checkout
#       - run: cargo --version
#       - restore_cache: { key: doc-test-cache }
#       - run: cargo doc --workspace --all-features --no-deps
#       - run: cargo test --workspace --doc --all-features
#       - save_cache:
#           key: doc-test-cache
#           paths:
#             - '~/.cargo'
#             - './target'
